# -----------------------------------------------------------------------------
# Imports
# -----------------------------------------------------------------------------

from bs4 import BeautifulSoup

import pytest
from jsonom import PronomData

# -----------------------------------------------------------------------------
# Tests
# -----------------------------------------------------------------------------


class TestPronomData:
    def test_init(self):
        pronom_data = PronomData("test")
        assert pronom_data.base_url == "https://www.nationalarchives.gov.uk"
        assert pronom_data.url == "test"
        pronom_data = PronomData("/test")
        assert pronom_data.url == "test"


class TestPronomDataMethods:
    pronom = PronomData("aboutapps/pronom/droid-signature-files.htm")

    def test_raw_data(self):
        assert (
            "This page contains an archive of all previously released "
            "signature files. Signature files are generated by PRONOM "
            "and used by DROID for file format identification. The "
            "signatures are presented here in xml form, each xml file "
            "contains multiple signatures that were released at the same time."
            in self.pronom.raw_data()
        )

    def test_soup(self):
        assert isinstance(self.pronom.soup(), BeautifulSoup)
        assert (
            self.pronom.soup().title.get_text().strip()
            == "The National Archives | PRONOM | DROID signatures"
        )

    def test_latest_file(self):
        # Signature file
        sig_file = self.pronom.latest_file("signature")
        sig_keys = sig_file["FFSignatureFile"].keys()
        assert "@DateCreated" in sig_keys
        assert "@Version" in sig_keys
        assert "@xmlns" in sig_keys
        assert "InternalSignatureCollection" in sig_keys
        assert "FileFormatCollection" in sig_keys

        # Container file
        cont_file = self.pronom.latest_file("container")
        cont_keys = cont_file["ContainerSignatureMapping"].keys()
        assert "@schemaVersion" in cont_keys
        assert "@signatureVersion" in cont_keys
        assert "ContainerSignatures" in cont_keys
        assert "FileFormatMappings" in cont_keys
        assert "TriggerPuids" in cont_keys

        # Wrong input - it won't type check, which is nice :)
        with pytest.raises(
            ValueError,
            match="file_type must be either signature or container.",
        ):
            self.pronom.latest_file("fail")  # type: ignore
